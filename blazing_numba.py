#!/usr/bin/env python3
"""
üöÄ‚ö° BLAZING FAST Python JIT VERSION with Numba ‚ö°üöÄ

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Python:
- Numba JIT (LLVM backend)
- NumPy vectorization
- Multiprocessing
- Memory views
- Type annotations
"""

import os
import time
import numpy as np
from typing import List, Tuple
from numba import jit, njit, prange, types
from numba.typed import List as TypedList
import multiprocessing as mp
from concurrent.futures import ProcessPoolExecutor
import gc

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
os.environ['NUMBA_CACHE'] = '1'  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
os.environ['NUMBA_NUM_THREADS'] = str(mp.cpu_count())  # –í—Å–µ —è–¥—Ä–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏

class User:
    """–û–±—ã—á–Ω—ã–π User class –¥–ª—è AoS"""
    __slots__ = ['id', 'name', 'age']  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
    
    def __init__(self, id: int, name: str, age: int):
        self.id = id
        self.name = name
        self.age = age

class UserSoA:
    """Struct of Arrays –¥–ª—è –ª—É—á—à–µ–π cache locality"""
    __slots__ = ['ids', 'names', 'ages']
    
    def __init__(self):
        self.ids: List[int] = []
        self.names: List[str] = []
        self.ages: List[int] = []
    
    @classmethod
    def new_with_capacity(cls, capacity: int):
        instance = cls()
        # Pre-allocate lists for better performance
        instance.ids = [0] * capacity
        instance.names = [''] * capacity  
        instance.ages = [0] * capacity
        return instance
    
    def add_user(self, user_id: int, name: str, age: int) -> None:
        self.ids.append(user_id)
        self.names.append(name)
        self.ages.append(age)

# üî• NUMBA JIT OPTIMIZED VERSIONS üî•

@njit(cache=True, fastmath=True, nogil=True)
def sum_ages_jit_basic(ages: np.ndarray) -> int:
    """–ë–∞–∑–æ–≤–∞—è JIT –≤–µ—Ä—Å–∏—è —Å Numba"""
    total = 0
    for age in ages:
        total += age
    return total

@njit(cache=True, fastmath=True, nogil=True)
def sum_ages_jit_unrolled(ages: np.ndarray) -> int:
    """JIT —Å loop unrolling –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    total = 0
    n = len(ages)
    i = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ —Ä–∞–∑ (unrolling)
    while i + 8 <= n:
        total += (ages[i] + ages[i+1] + ages[i+2] + ages[i+3] + 
                 ages[i+4] + ages[i+5] + ages[i+6] + ages[i+7])
        i += 8
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    while i < n:
        total += ages[i]
        i += 1
    
    return total

@njit(cache=True, fastmath=True, nogil=True, parallel=True)
def sum_ages_jit_parallel(ages: np.ndarray) -> int:
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è JIT –≤–µ—Ä—Å–∏—è —Å prange"""
    n = len(ages)
    total = 0
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å Numba
    for i in prange(n):
        total += ages[i]
    
    return total

@njit(cache=True, fastmath=True, nogil=True)
def sum_ages_jit_simd_like(ages: np.ndarray) -> int:
    """SIMD-–ø–æ–¥–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ JIT"""
    total = 0
    n = len(ages)
    i = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 16 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è SIMD)
    while i + 16 <= n:
        chunk_sum = 0
        for j in range(16):
            chunk_sum += ages[i + j]
        total += chunk_sum
        i += 16
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    while i < n:
        total += ages[i]
        i += 1
        
    return total

@njit(cache=True, fastmath=True, nogil=True, parallel=True)
def sum_ages_jit_godlike(ages: np.ndarray) -> int:
    """GODLIKE JIT –≤–µ—Ä—Å–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    n = len(ages)
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
    chunk_size = max(1, n // (4 * mp.cpu_count()))  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
    num_chunks = (n + chunk_size - 1) // chunk_size
    
    total = 0
    for chunk_idx in prange(num_chunks):
        start = chunk_idx * chunk_size
        end = min(start + chunk_size, n)
        chunk_sum = 0
        
        # Unrolled loop –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
        i = start
        while i + 8 <= end:
            chunk_sum += (ages[i] + ages[i+1] + ages[i+2] + ages[i+3] + 
                         ages[i+4] + ages[i+5] + ages[i+6] + ages[i+7])
            i += 8
        
        while i < end:
            chunk_sum += ages[i]
            i += 1
            
        total += chunk_sum
    
    return total

# ‚ö° NUMPY VECTORIZED VERSIONS ‚ö°

def sum_ages_numpy_basic(ages: np.ndarray) -> int:
    """–ë–∞–∑–æ–≤–∞—è NumPy –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    return np.sum(ages, dtype=np.int64)

def sum_ages_numpy_optimized(ages: np.ndarray) -> int:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è NumPy –≤–µ—Ä—Å–∏—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    if ages.dtype != np.uint8:
        ages = ages.astype(np.uint8)
    return np.sum(ages, dtype=np.int64)

def sum_ages_numpy_chunked(ages: np.ndarray, chunk_size: int = 1024*1024) -> int:
    """NumPy —Å chunked processing –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤"""
    total = 0
    n = len(ages)
    
    for i in range(0, n, chunk_size):
        chunk = ages[i:i+chunk_size]
        total += np.sum(chunk, dtype=np.int64)
    
    return total

# üåü MULTIPROCESSING VERSIONS üåü

def sum_chunk_worker(chunk: np.ndarray) -> int:
    """Worker function –¥–ª—è multiprocessing"""
    return np.sum(chunk, dtype=np.int64)

def sum_ages_multiprocessing(ages: np.ndarray, num_processes: int = None) -> int:
    """Multiprocessing –≤–µ—Ä—Å–∏—è —Å NumPy"""
    if num_processes is None:
        num_processes = mp.cpu_count()
    
    n = len(ages)
    chunk_size = max(1, n // num_processes)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
    chunks = [ages[i:i+chunk_size] for i in range(0, n, chunk_size)]
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    with ProcessPoolExecutor(max_workers=num_processes) as executor:
        results = executor.map(sum_chunk_worker, chunks)
    
    return sum(results)

@njit(cache=True, fastmath=True, nogil=True)
def sum_chunk_jit_worker(chunk: np.ndarray) -> int:
    """JIT worker –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    return sum_ages_jit_unrolled(chunk)

def sum_ages_jit_multiprocessing(ages: np.ndarray, num_processes: int = None) -> int:
    """–ö–æ–º–±–∏–Ω–∞—Ü–∏—è JIT + Multiprocessing"""
    if num_processes is None:
        num_processes = mp.cpu_count()
    
    n = len(ages)
    chunk_size = max(1, n // num_processes)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
    chunks = [ages[i:i+chunk_size] for i in range(0, n, chunk_size)]
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å JIT
    with ProcessPoolExecutor(max_workers=num_processes) as executor:
        results = executor.map(sum_chunk_jit_worker, chunks)
    
    return sum(results)

# üöÄ MEMORY OPTIMIZED VERSIONS üöÄ

def sum_ages_memoryview(ages_list: List[int]) -> int:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ memory views –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é"""
    # –°–æ–∑–¥–∞–µ–º numpy array –∏–∑ —Å–ø–∏—Å–∫–∞
    ages_array = np.array(ages_list, dtype=np.uint8)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º memory view –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    mv = memoryview(ages_array)
    total = 0
    
    # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ memory view
    for i in range(len(mv)):
        total += mv[i]
    
    return total

@njit(cache=True, fastmath=True, nogil=True)
def sum_ages_jit_from_list(ages_list):
    """JIT –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞—é—â–∞—è –Ω–∞–ø—Ä—è–º—É—é —Å typed list"""
    total = 0
    for age in ages_list:
        total += age
    return total

# üíæ BLAZING FAST I/O FUNCTIONS üíæ

def print_results_blazing(name: str, avg_age: int, elapsed_ms: float, speedup: float = None) -> None:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if speedup:
        print(f"{name:20s}: {avg_age:3d} - {elapsed_ms:8.3f}ms ({speedup:5.1f}x faster)")
    else:
        print(f"{name:20s}: {avg_age:3d} - {elapsed_ms:8.3f}ms")

def write_results_to_file(results: List[Tuple[str, int, float]], filename: str = "blazing_results_python.txt") -> None:
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    with open(filename, 'w', buffering=8192) as f:
        f.write("üöÄ‚ö° PYTHON BLAZING FAST RESULTS ‚ö°üöÄ\n\n")
        for name, avg_age, elapsed_ms in results:
            f.write(f"{name}: {avg_age} avg age - {elapsed_ms:.3f}ms\n")

def main() -> None:
    print("üêçüöÄ‚ö° PYTHON BLAZING FAST JIT VERSION ‚ö°üöÄüêç\n")
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    num_users = int(os.getenv("NUM_USERS", "100000000"))
    num_processes = mp.cpu_count()
    
    print(f"User size: {User.__sizeof__(User())} bytes")
    print(f"Processing {num_users:,} users")
    print(f"CPU cores: {num_processes}")
    print(f"Numba cache enabled: {os.getenv('NUMBA_CACHE', 'False')}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä Creating data...")
    users: List[User] = []
    user_soa = UserSoA()
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for i in range(num_users):
        uid = i
        name = f"User {i}"
        age = i % 100
        users.append(User(uid, name, age))
        user_soa.add_user(uid, name, age)
    
    # –°–æ–∑–¥–∞–µ–º NumPy –º–∞—Å—Å–∏–≤ –¥–ª—è JIT –≤–µ—Ä—Å–∏–π
    ages_numpy = np.array(user_soa.ages, dtype=np.uint8)
    
    # –°–æ–∑–¥–∞–µ–º typed list –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö Numba —Ñ—É–Ω–∫—Ü–∏–π
    ages_typed = TypedList()
    for age in user_soa.ages:
        ages_typed.append(age)
    
    print("‚úÖ Data created!\n")
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    algorithms = [
        ("AoS Basic", lambda: sum(u.age for u in users)),
        ("SoA Basic", lambda: sum(user_soa.ages)),
        ("NumPy Basic", lambda: sum_ages_numpy_basic(ages_numpy)),
        ("NumPy Optimized", lambda: sum_ages_numpy_optimized(ages_numpy)),
        ("NumPy Chunked", lambda: sum_ages_numpy_chunked(ages_numpy)),
        ("Memory View", lambda: sum_ages_memoryview(user_soa.ages)),
        ("JIT Basic", lambda: sum_ages_jit_basic(ages_numpy)),
        ("JIT Unrolled", lambda: sum_ages_jit_unrolled(ages_numpy)),
        ("JIT SIMD-like", lambda: sum_ages_jit_simd_like(ages_numpy)),
        ("JIT Parallel", lambda: sum_ages_jit_parallel(ages_numpy)),
        ("JIT GODLIKE", lambda: sum_ages_jit_godlike(ages_numpy)),
        ("Multiprocessing", lambda: sum_ages_multiprocessing(ages_numpy)),
        ("JIT + MP", lambda: sum_ages_jit_multiprocessing(ages_numpy)),
    ]
    
    # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º JIT —Ñ—É–Ω–∫—Ü–∏–∏
    print("üî• Warming up JIT functions...")
    small_test = ages_numpy[:1000]
    sum_ages_jit_basic(small_test)
    sum_ages_jit_unrolled(small_test)
    sum_ages_jit_simd_like(small_test)
    sum_ages_jit_parallel(small_test)
    sum_ages_jit_godlike(small_test)
    print("‚úÖ JIT warmup complete!\n")
    
    baseline_time = None
    
    for name, func in algorithms:
        print(f"üî• {name.upper()} VERSION:")
        
        # Garbage collection –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        gc.collect()
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        start_time = time.perf_counter()
        total_age = func()
        elapsed_time = time.perf_counter() - start_time
        
        avg_age = total_age // num_users
        elapsed_ms = elapsed_time * 1000
        
        if baseline_time is None:
            baseline_time = elapsed_ms
            print_results_blazing(name, avg_age, elapsed_ms)
        else:
            speedup = baseline_time / elapsed_ms
            print_results_blazing(name, avg_age, elapsed_ms, speedup)
        
        results.append((name, avg_age, elapsed_ms))
        print()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    fastest = min(results, key=lambda x: x[2])
    max_speedup = baseline_time / fastest[2]
    
    print("üìä PERFORMANCE SUMMARY:")
    print("=" * 60)
    for name, avg_age, elapsed_ms in results:
        speedup = baseline_time / elapsed_ms
        print(f"{name:20s}: {elapsed_ms:8.3f}ms ({speedup:5.1f}x)")
    print("=" * 60)
    
    print(f"\nüèÜ‚ö° –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–û–ë–ï–î–ò–¢–ï–õ–¨ PYTHON: {fastest[0]}")
    print(f"    –í—Ä–µ–º—è: {fastest[2]:.3f}ms")
    print(f"    –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {max_speedup:.1f}x\n")
    
    if max_speedup > 50:
        print("üåå‚ö° PYTHON –î–û–°–¢–ò–ì LUDICROUS SPEED! ‚ö°üåå\n")
    elif max_speedup > 20:
        print("üöÄ PYTHON –†–ê–ë–û–¢–ê–ï–¢ –° BLAZING SPEED! üöÄ\n")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —è–∑—ã–∫–∞–º–∏
    print("üî¨ COMPARISON WITH OTHER LANGUAGES:")
    print("Rust PARALLEL LUDICROUS: ~2.32ms (37x faster)")
    print("C++ Expected: ~2-3ms (35-50x faster)")
    print(f"Python JIT Best: {fastest[2]:.2f}ms ({max_speedup:.1f}x faster)")
    print()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    write_results_to_file(results)
    print("üíæ Results written to: blazing_results_python.txt")
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    print("\nüéØ PYTHON OPTIMIZATION SUMMARY:")
    print("‚Ä¢ Numba JIT: LLVM-based native code compilation")
    print("‚Ä¢ NumPy: Vectorized operations in C")
    print("‚Ä¢ Multiprocessing: True parallelism bypassing GIL")
    print("‚Ä¢ Memory views: Zero-copy data access")
    print("‚Ä¢ Type annotations: Better JIT optimization")
    print("‚Ä¢ Caching: Compiled code reuse")
    print("‚Ä¢ Loop unrolling: Reduced iteration overhead")
    print("‚Ä¢ Chunked processing: Better memory locality")
    
    print(f"\nüí• PYTHON JIT VERSION COMPLETE! üí•")
    print("üêç Even Python can be BLAZING FAST with the right tools! üêç‚ö°")

if __name__ == "__main__":
    main()
