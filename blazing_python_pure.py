#!/usr/bin/env python3
"""
üêçüöÄ‚ö° BLAZING FAST Pure Python VERSION (No Dependencies) ‚ö°üöÄüêç

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ Python:
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
- __slots__ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
- –†–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ü–∏–∫–ª–∞–º
- Multiprocessing (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
- –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import time
import gc
import platform
import multiprocessing as mp
from typing import List, Tuple, Optional
from concurrent.futures import ProcessPoolExecutor

class User:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π User class —Å __slots__"""
    __slots__ = ['id', 'name', 'age']
    
    def __init__(self, id: int, name: str, age: int):
        self.id = id
        self.name = name
        self.age = age

class UserSoA:
    """Struct of Arrays –≤–µ—Ä—Å–∏—è"""
    __slots__ = ['ids', 'names', 'ages']
    
    def __init__(self):
        self.ids: List[int] = []
        self.names: List[str] = []
        self.ages: List[int] = []
    
    def add_user(self, user_id: int, name: str, age: int) -> None:
        self.ids.append(user_id)
        self.names.append(name)
        self.ages.append(age)

# üêç PURE PYTHON OPTIMIZED VERSIONS üêç

def sum_ages_python_basic(users: List[User]) -> int:
    """–ë–∞–∑–æ–≤–∞—è Python –≤–µ—Ä—Å–∏—è - AoS"""
    return sum(user.age for user in users)

def sum_ages_python_soa(user_soa: UserSoA) -> int:
    """SoA –≤–µ—Ä—Å–∏—è"""
    return sum(user_soa.ages)

def sum_ages_builtin_sum(ages: List[int]) -> int:
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è sum() - —Å–∞–º–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"""
    return sum(ages)

def sum_ages_manual_loop(ages: List[int]) -> int:
    """–†—É—á–Ω–æ–π —Ü–∏–∫–ª"""
    total = 0
    for age in ages:
        total += age
    return total

def sum_ages_while_loop(ages: List[int]) -> int:
    """While —Ü–∏–∫–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º"""
    total = 0
    i = 0
    n = len(ages)
    while i < n:
        total += ages[i]
        i += 1
    return total

def sum_ages_unrolled_2(ages: List[int]) -> int:
    """Loop unrolling x2"""
    total = 0
    n = len(ages)
    i = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
    while i + 2 <= n:
        total += ages[i] + ages[i+1]
        i += 2
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    while i < n:
        total += ages[i]
        i += 1
    
    return total

def sum_ages_unrolled_4(ages: List[int]) -> int:
    """Loop unrolling x4"""
    total = 0
    n = len(ages)
    i = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 4 —ç–ª–µ–º–µ–Ω—Ç–∞
    while i + 4 <= n:
        total += ages[i] + ages[i+1] + ages[i+2] + ages[i+3]
        i += 4
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    while i < n:
        total += ages[i]
        i += 1
    
    return total

def sum_ages_unrolled_8(ages: List[int]) -> int:
    """Loop unrolling x8"""
    total = 0
    n = len(ages)
    i = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    while i + 8 <= n:
        total += (ages[i] + ages[i+1] + ages[i+2] + ages[i+3] + 
                 ages[i+4] + ages[i+5] + ages[i+6] + ages[i+7])
        i += 8
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    while i < n:
        total += ages[i]
        i += 1
    
    return total

def sum_ages_chunked(ages: List[int], chunk_size: int = 1000) -> int:
    """Chunked processing –¥–ª—è –ª—É—á—à–µ–π cache locality"""
    total = 0
    n = len(ages)
    
    for i in range(0, n, chunk_size):
        chunk_end = min(i + chunk_size, n)
        chunk_sum = 0
        
        for j in range(i, chunk_end):
            chunk_sum += ages[j]
        
        total += chunk_sum
    
    return total

def sum_ages_slice_sum(ages: List[int]) -> int:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ slice –∏ sum()"""
    return sum(ages[:])

def sum_ages_reduce(ages: List[int]) -> int:
    """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å reduce"""
    from functools import reduce
    import operator
    return reduce(operator.add, ages, 0)

def sum_ages_map_sum(ages: List[int]) -> int:
    """Map + sum –ø–æ–¥—Ö–æ–¥"""
    return sum(map(int, ages))

# üöÄ MULTIPROCESSING VERSIONS üöÄ

def sum_chunk_worker(chunk: List[int]) -> int:
    """Worker —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è multiprocessing"""
    return sum(chunk)

def sum_ages_multiprocessing_simple(ages: List[int], num_processes: int = None) -> int:
    """–ü—Ä–æ—Å—Ç–∞—è multiprocessing –≤–µ—Ä—Å–∏—è"""
    if num_processes is None:
        num_processes = min(mp.cpu_count(), 4)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    if len(ages) < 100000:  # –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ multiprocessing –Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω
        return sum(ages)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
    chunk_size = max(1, len(ages) // num_processes)
    chunks = [ages[i:i+chunk_size] for i in range(0, len(ages), chunk_size)]
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    with ProcessPoolExecutor(max_workers=num_processes) as executor:
        results = executor.map(sum_chunk_worker, chunks)
    
    return sum(results)

def sum_chunk_optimized(chunk: List[int]) -> int:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π worker —Å unrolling"""
    total = 0
    n = len(chunk)
    i = 0
    
    # Unrolling –≤–Ω—É—Ç—Ä–∏ worker'–∞
    while i + 4 <= n:
        total += chunk[i] + chunk[i+1] + chunk[i+2] + chunk[i+3]
        i += 4
    
    while i < n:
        total += chunk[i]
        i += 1
    
    return total

def sum_ages_multiprocessing_optimized(ages: List[int], num_processes: int = None) -> int:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è multiprocessing –≤–µ—Ä—Å–∏—è"""
    if num_processes is None:
        num_processes = mp.cpu_count()
    
    if len(ages) < 50000:
        return sum_ages_unrolled_8(ages)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ —Å —É—á–µ—Ç–æ–º cache line
    chunk_size = max(1000, len(ages) // num_processes)  # –ú–∏–Ω–∏–º—É–º 1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    chunks = [ages[i:i+chunk_size] for i in range(0, len(ages), chunk_size)]
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º worker'–æ–º
    with ProcessPoolExecutor(max_workers=num_processes) as executor:
        results = executor.map(sum_chunk_optimized, chunks)
    
    return sum(results)

# üíæ BENCHMARKING INFRASTRUCTURE üíæ

class BenchmarkResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    def __init__(self, name: str, result: int, time_ms: float, avg_age: float):
        self.name = name
        self.result = result
        self.time_ms = time_ms
        self.avg_age = avg_age
        self.speedup: Optional[float] = None

def run_benchmark(name: str, func, *args, warmup_runs: int = 1) -> BenchmarkResult:
    """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å warmup"""
    # Warmup runs
    for _ in range(warmup_runs):
        try:
            func(*args)
        except:
            pass
    
    # –ì–ª–∞–≤–Ω—ã–π –∑–∞–º–µ—Ä
    gc.collect()  # –û—á–∏—Å—Ç–∫–∞ garbage collector
    
    start_time = time.perf_counter()
    try:
        result = func(*args)
        elapsed_time = time.perf_counter() - start_time
        time_ms = elapsed_time * 1000
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç
        if isinstance(args[0], list) and len(args[0]) > 0:
            if hasattr(args[0][0], 'age'):  # –°–ø–∏—Å–æ–∫ User –æ–±—ä–µ–∫—Ç–æ–≤
                avg_age = result / len(args[0])
            else:  # –°–ø–∏—Å–æ–∫ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
                avg_age = result / len(args[0])
        elif hasattr(args[0], 'ages'):  # UserSoA –æ–±—ä–µ–∫—Ç
            avg_age = result / len(args[0].ages)
        else:
            avg_age = result / len(args[0]) if len(args[0]) > 0 else 0
        
        return BenchmarkResult(name, result, time_ms, avg_age)
    
    except Exception as e:
        print(f"‚ùå Error in {name}: {e}")
        return BenchmarkResult(name, 0, float('inf'), 0)

def print_results_table(results: List[BenchmarkResult]) -> None:
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    print("üìä PURE PYTHON PERFORMANCE COMPARISON:")
    print("=" * 70)
    print(f"{'Algorithm':<25s} {'Avg Age':<8s} {'Time (ms)':<12s} {'Speedup':<10s}")
    print("=" * 70)
    
    for result in results:
        if result.time_ms == float('inf'):
            speedup_str = "FAILED"
        else:
            speedup_str = f"{result.speedup:.1f}x" if result.speedup else "baseline"
        print(f"{result.name:<25s} {result.avg_age:<8.0f} {result.time_ms:<12.3f} {speedup_str:<10s}")
    
    print("=" * 70)

def write_results_to_file(results: List[BenchmarkResult], system_info: dict) -> None:
    """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    filename = "blazing_results_python_pure.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("üêçüöÄ‚ö° PURE PYTHON BLAZING FAST RESULTS ‚ö°üöÄüêç\n\n")
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        f.write("üñ•Ô∏è SYSTEM INFO:\n")
        for key, value in system_info.items():
            f.write(f"   {key}: {value}\n")
        f.write("\n")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        f.write("üìä BENCHMARK RESULTS:\n")
        f.write("=" * 50 + "\n")
        for result in results:
            if result.time_ms != float('inf'):
                speedup_str = f" ({result.speedup:.1f}x faster)" if result.speedup else ""
                f.write(f"{result.name}: {result.avg_age:.0f} avg - {result.time_ms:.3f}ms{speedup_str}\n")
        f.write("=" * 50 + "\n")
        
        # –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        valid_results = [r for r in results if r.time_ms != float('inf')]
        if valid_results:
            fastest = min(valid_results, key=lambda x: x.time_ms)
            f.write(f"\nüèÜ FASTEST: {fastest.name} - {fastest.time_ms:.3f}ms\n")
            f.write(f"üí• MAX SPEEDUP: {fastest.speedup:.1f}x faster than baseline\n")

def get_system_info() -> dict:
    """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "Platform": platform.platform(),
        "Python Version": platform.python_version(),
        "Python Implementation": platform.python_implementation(),
        "CPU Cores": mp.cpu_count(),
        "Architecture": platform.architecture()[0],
        "Machine": platform.machine(),
        "Dependencies": "Pure Python (no external libraries)",
    }

def main() -> None:
    print("üêçüöÄ‚ö° PURE PYTHON BLAZING FAST BENCHMARK SUITE ‚ö°üöÄüêç\n")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    system_info = get_system_info()
    
    print("üñ•Ô∏è SYSTEM INFO:")
    for key, value in system_info.items():
        print(f"   {key}: {value}")
    print()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    num_users = int(os.getenv("NUM_USERS", "1000000"))  # 1M –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Pure Python
    
    print(f"Processing {num_users:,} users")
    print(f"User object size: ~{sys.getsizeof(User(0, '', 0))} bytes")
    print(f"List overhead per element: ~{sys.getsizeof([0]) - sys.getsizeof(0)} bytes")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä Creating test data...")
    
    users: List[User] = []
    user_soa = UserSoA()
    ages_list: List[int] = []
    
    for i in range(num_users):
        uid = i
        name = f"User {i}"
        age = i % 100
        
        users.append(User(uid, name, age))
        user_soa.add_user(uid, name, age)
        ages_list.append(age)
    
    print("‚úÖ Test data created!")
    print(f"Memory usage: ~{sys.getsizeof(users) + sys.getsizeof(ages_list):,} bytes")
    print()
    
    # –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    results: List[BenchmarkResult] = []
    
    # –í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    algorithms = [
        ("AoS Basic", sum_ages_python_basic, users),
        ("SoA Basic", sum_ages_python_soa, user_soa),
        ("Builtin Sum", sum_ages_builtin_sum, ages_list),
        ("Manual Loop", sum_ages_manual_loop, ages_list),
        ("While Loop", sum_ages_while_loop, ages_list),
        ("Unrolled x2", sum_ages_unrolled_2, ages_list),
        ("Unrolled x4", sum_ages_unrolled_4, ages_list),
        ("Unrolled x8", sum_ages_unrolled_8, ages_list),
        ("Chunked", sum_ages_chunked, ages_list),
        ("Slice Sum", sum_ages_slice_sum, ages_list),
        ("Reduce", sum_ages_reduce, ages_list),
        ("Map Sum", sum_ages_map_sum, ages_list),
    ]
    
    # Multiprocessing –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if num_users >= 100000:
        algorithms.extend([
            ("MP Simple", sum_ages_multiprocessing_simple, ages_list),
            ("MP Optimized", sum_ages_multiprocessing_optimized, ages_list),
        ])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–µ–Ω—á–º–∞—Ä–∫–∏
    print("üöÄ Running benchmarks...\n")
    
    for name, func, data in algorithms:
        print(f"üî• Testing {name}...")
        result = run_benchmark(name, func, data)
        results.append(result)
        
        if result.time_ms != float('inf'):
            print(f"   Result: {result.avg_age:.0f} avg age")
            print(f"   Time: {result.time_ms:.3f}ms")
        print()
    
    # –í—ã—á–∏—Å–ª—è–µ–º speedup –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ baseline
    valid_results = [r for r in results if r.time_ms != float('inf')]
    if valid_results:
        baseline_time = valid_results[0].time_ms
        for result in results:
            if result.time_ms != float('inf'):
                result.speedup = baseline_time / result.time_ms
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_results_table(results)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π
    if valid_results:
        fastest = min(valid_results, key=lambda x: x.time_ms)
        
        print(f"\nüèÜ‚ö° –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–û–ë–ï–î–ò–¢–ï–õ–¨ PURE PYTHON: {fastest.name}")
        print(f"    –í—Ä–µ–º—è: {fastest.time_ms:.3f}ms")
        print(f"    –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {fastest.speedup:.1f}x\n")
        
        if fastest.speedup > 5:
            print("üî• –û–¢–õ–ò–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¥–ª—è Pure Python! üî•")
        elif fastest.speedup > 2:
            print("‚úÖ –•–æ—Ä–æ—à–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Python –∫–æ–¥–∞!")
        
        print()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —è–∑—ã–∫–∞–º–∏
        print("üî¨ COMPARISON WITH OTHER LANGUAGES:")
        print("Rust PARALLEL LUDICROUS: ~2.32ms (37x faster)")
        print("C++ Expected: ~2-3ms (35-50x faster)")
        print(f"Python Pure: {fastest.time_ms:.2f}ms ({fastest.speedup:.1f}x faster)")
        print()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        write_results_to_file(results, system_info)
        print("üíæ Results written to: blazing_results_python_pure.txt")
        
        print("\nüéØ PURE PYTHON OPTIMIZATION SUMMARY:")
        print("‚úÖ Built-in sum(): Highly optimized C implementation")
        print("‚úÖ Loop unrolling: Reduces Python bytecode overhead")
        print("‚úÖ Multiprocessing: Bypasses GIL for CPU-bound tasks")
        print("‚úÖ __slots__: Reduces memory overhead")
        print("‚úÖ Algorithm choice: Different approaches for different data sizes")
        print("‚úÖ Chunked processing: Better cache locality")
        
        print(f"\nüí• PURE PYTHON BENCHMARK COMPLETE! üí•")
        print("üêç –î–∞–∂–µ —á–∏—Å—Ç—ã–π Python –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä—ã–º! üêç‚ö°")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print("\nüöÄ For BLAZING FAST performance, install:")
        print("   ‚Ä¢ NumPy: pip install numpy (vectorization)")
        print("   ‚Ä¢ Numba: pip install numba (JIT compilation)")
        print("   ‚Ä¢ Cython: pip install cython (C extensions)")
        
        if fastest.time_ms > 100:
            print(f"\nüí° For {num_users:,} elements, consider:")
            print("   ‚Ä¢ Reducing data size for testing")
            print("   ‚Ä¢ Installing NumPy/Numba for 10-100x speedup")
            print("   ‚Ä¢ Using PyPy for automatic JIT compilation")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º multiprocessing –¥–ª—è Windows
    if __name__ == "__main__":
        mp.set_start_method('spawn', force=True)
    
    main()
